/**
 * React-Antd-Admin-Rest-Api
 * a standard restful api for project react-antd-admin
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse200 from '../model/InlineResponse200';
import UserInfo from '../model/UserInfo';

/**
* Authentication service.
* @module api/AuthenticationApi
* @version 0.0.0
*/
export default class AuthenticationApi {

    /**
    * Constructs a new AuthenticationApi. 
    * @alias module:api/AuthenticationApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * post username and password
     * Will send the authenticated user info if authentication is succesful, otherwise it will send &#x60;Authentication failed&#x60;
     * @param {module:model/UserInfo} userInfo user info for authenticate
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    postAuthenticationWithHttpInfo(userInfo) {
      let postBody = userInfo;

      // verify the required parameter 'userInfo' is set
      if (userInfo === undefined || userInfo === null) {
        throw new Error("Missing the required parameter 'userInfo' when calling postAuthentication");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/plain', 'text/html'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/authentication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * post username and password
     * Will send the authenticated user info if authentication is succesful, otherwise it will send &#x60;Authentication failed&#x60;
     * @param {module:model/UserInfo} userInfo user info for authenticate
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    postAuthentication(userInfo) {
      return this.postAuthenticationWithHttpInfo(userInfo)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
